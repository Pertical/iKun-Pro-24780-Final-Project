{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red255\green255\blue255;\red196\green26\blue22;
\red0\green0\blue0;\red155\green35\blue147;\red15\green104\blue160;\red28\green0\blue207;\red11\green79\blue121;
\red93\green108\blue121;\red108\green54\blue169;\red50\green109\blue116;}
{\*\expandedcolortbl;;\csgenericrgb\c39147\c22031\c12446;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c4314\c30980\c47451;
\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c19418\c42935\c45455;}
\margl1440\margr1440\vieww10920\viewh7800\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 #include \cf4 <stdio.h>\cf5 \
\cf2 #include \cf4 <stdlib.h>\cf5 \
\cf2 #include \cf4 "fssimplewindow.h"\cf5 \
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawPlayer\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  x,
\f1\b \cf6 int
\f0\b0 \cf5  y)\
\{\
	glColor3f(\cf8 0\cf5 ,\cf8 1\cf5 ,\cf8 0\cf5 );\
	glBegin(GL_QUADS);\
	glVertex2i(x-\cf8 5\cf5 ,y);\
	glVertex2i(x-\cf8 5\cf5 ,y-\cf8 20\cf5 );\
	glVertex2i(x+\cf8 5\cf5 ,y-\cf8 20\cf5 );\
	glVertex2i(x+\cf8 5\cf5 ,y);\
\
	glVertex2i(x-\cf8 15\cf5 ,y);\
	glVertex2i(x-\cf8 15\cf5 ,y-\cf8 10\cf5 );\
	glVertex2i(x+\cf8 15\cf5 ,y-\cf8 10\cf5 );\
	glVertex2i(x+\cf8 15\cf5 ,y);\
	glEnd();\
\}\
\

\f1\b \cf6 bool
\f0\b0 \cf5  \cf7 CheckCollision\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  mx,
\f1\b \cf6 int
\f0\b0 \cf5  my,
\f1\b \cf6 int
\f0\b0 \cf5  tx,
\f1\b \cf6 int
\f0\b0 \cf5  ty,
\f1\b \cf6 int
\f0\b0 \cf5  tw,
\f1\b \cf6 int
\f0\b0 \cf5  th)\
\{\
	
\f1\b \cf6 int
\f0\b0 \cf5  rx=mx-tx;\
	
\f1\b \cf6 int
\f0\b0 \cf5  ry=my-ty;\
	
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 <=rx && rx<=tw && \cf8 0\cf5 <=ry && ry<=th)\
	\{\
		
\f1\b \cf6 return
\f0\b0 \cf5  
\f1\b \cf6 true
\f0\b0 \cf5 ;\
	\}\
	
\f1\b \cf6 return
\f0\b0 \cf5  
\f1\b \cf6 false
\f0\b0 \cf5 ;\
\}\
\

\f1\b \cf6 class
\f0\b0 \cf5  \cf9 Missile\cf5 \
\{\

\f1\b \cf6 public
\f0\b0 \cf5 :\
	
\f1\b \cf6 int
\f0\b0 \cf5  state,x,y;\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Initialize\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Launch\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  x0,
\f1\b \cf6 int
\f0\b0 \cf5  y0);\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Disappear\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Move\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Draw\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
\};\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Initialize\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	state=\cf8 0\cf5 ;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Launch\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  x0,
\f1\b \cf6 int
\f0\b0 \cf5  y0)\
\{\
	state=\cf8 1\cf5 ;\
	x=x0;\
	y=y0;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Disappear\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	state=\cf8 0\cf5 ;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Move\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	y-=\cf8 10\cf5 ;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Draw\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	glColor3ub(\cf8 255\cf5 ,\cf8 0\cf5 ,\cf8 0\cf5 );\
	glBegin(GL_LINES);\
	glVertex2i(x,y);\
	glVertex2i(x,y+\cf8 10\cf5 );\
	glEnd();\
\}\
\
\

\f1\b \cf6 class
\f0\b0 \cf5  \cf9 Target\cf5 \
\{\

\f1\b \cf6 public
\f0\b0 \cf5 :\
	
\f1\b \cf6 int
\f0\b0 \cf5  state,x,y,w,h,v;\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Initialize\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Move\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Disappear\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Draw\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
\};\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Target\cf5 ::\cf7 Initialize\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	state=\cf8 1\cf5 ;\
	x=\cf8 0\cf5 ;\
	y=\cf8 100\cf5 +rand()%\cf8 20\cf5 ;\
	w=\cf8 60\cf5 +rand()%\cf8 40\cf5 ;\
	h=\cf8 20\cf5 ;\
	v=\cf8 20\cf5 +rand()%\cf8 20\cf5 ;\
\}\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Target\cf5 ::\cf7 Move\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	x+=v;\
\}\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Target\cf5 ::\cf7 Disappear\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	state=\cf8 0\cf5 ;\
\}\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Target\cf5 ::\cf7 Draw\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	glColor3f(\cf8 0\cf5 ,\cf8 1\cf5 ,\cf8 1\cf5 );\
	glBegin(GL_QUADS);\
	glVertex2i(x,y);\
	glVertex2i(x+w,y);\
	glVertex2i(x+w,y+h);\
	glVertex2i(x,y+h);\
	glEnd();\
\}\
\
\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawMissiles\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  n,Missile missiles[])\
\{\
	
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i=\cf8 0\cf5 ; i<n; ++i)\
	\{\
		
\f1\b \cf6 auto
\f0\b0 \cf5  m=missiles[i];\
		
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=m.state)\
		\{\
			m.Draw();\
		\}\
	\}\
\}\
\

\f1\b \cf6 int
\f0\b0 \cf5  \cf7 main\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	
\f1\b \cf6 const
\f0\b0 \cf5  
\f1\b \cf6 int
\f0\b0 \cf5  numMissiles=\cf8 3\cf5 ;\
	
\f1\b \cf6 const
\f0\b0 \cf5  
\f1\b \cf6 int
\f0\b0 \cf5  numTargets=\cf8 5\cf5 ;\
	
\f1\b \cf6 int
\f0\b0 \cf5  x=\cf8 400\cf5 ,y=\cf8 550\cf5 ;\
	Missile missiles[numMissiles];\
	Target targets[numTargets];\
\
	
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &m : missiles)\
	\{\
		m.Initialize();\
	\}\
\
	
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &t : targets)\
	\{\
		t.Initialize();\
	\}\
\
	
\f1\b \cf6 int
\f0\b0 \cf5  closeCounter=\cf8 0\cf5 ;\
\
	FsOpenWindow(\cf8 0\cf5 ,\cf8 0\cf5 ,\cf8 800\cf5 ,\cf8 600\cf5 ,\cf8 1\cf5 );\
	
\f1\b \cf6 for
\f0\b0 \cf5 (;;)\
	\{\
		FsPollDevice();\
		
\f1\b \cf6 auto
\f0\b0 \cf5  key=FsInkey();\
		
\f1\b \cf6 if
\f0\b0 \cf5 (FSKEY_ESC==key)\
		\{\
			
\f1\b \cf6 break
\f0\b0 \cf5 ;\
		\}\
\
		
\f1\b \cf6 if
\f0\b0 \cf5 (FsGetKeyState(FSKEY_LEFT))\
		\{\
			x-=\cf8 10\cf5 ;\
		\}\
		
\f1\b \cf6 if
\f0\b0 \cf5 (FsGetKeyState(FSKEY_RIGHT))\
		\{\
			x+=\cf8 10\cf5 ;\
		\}\
		
\f1\b \cf6 if
\f0\b0 \cf5 (FSKEY_SPACE==key)\
		\{\
			
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &m : missiles)\
			\{\
				
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 ==m.state)\
				\{\
					m.Launch(x,y);\
					
\f1\b \cf6 break
\f0\b0 \cf5 ;\
				\}\
			\}\
		\}\
\
		
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &m : missiles)\
		\{\
			
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=m.state)\
			\{\
				m.Move();\
				
\f1\b \cf6 if
\f0\b0 \cf5 (m.y<\cf8 0\cf5 )\
				\{\
					m.Disappear();\
				\}\
			\}\
		\}\
\
		
\f1\b \cf6 int
\f0\b0 \cf5  numTargetsAlive=\cf8 0\cf5 ;\
		
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &t : targets)\
		\{\
			
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=t.state)\
			\{\
				++numTargetsAlive;\
				t.Move();\
				
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 800\cf5 <t.x)\
				\{\
					t.x=\cf8 0\cf5 ;\
				\}\
			\}\
			
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &m : missiles)\
			\{\
				
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=m.state &&\
				   \cf8 0\cf5 !=t.state &&\
				   
\f1\b \cf6 true
\f0\b0 \cf5 ==CheckCollision(m.x,m.y,t.x,t.y,t.w,t.h))\
				\{\
					m.Disappear();\
					t.Disappear();\
					printf(\cf4 "Hit!\\n"\cf5 );\
				\}\
			\}\
		\}\
		
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 ==numTargetsAlive && \cf8 0\cf5 ==closeCounter)\
		\{\
			closeCounter=\cf8 20\cf5 ;\
		\}\
		
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 <closeCounter)\
		\{\
			--closeCounter;\
			
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 ==closeCounter)\
			\{\
				
\f1\b \cf6 break
\f0\b0 \cf5 ;\
			\}\
		\}\
\
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\
		DrawPlayer(x,y);\
\
		DrawMissiles(numMissiles,missiles);\
		
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  t : targets)\
		\{\
			
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=t.state)\
			\{\
				t.Draw();\
			\}\
		\}\
\
		FsSwapBuffers();\
		FsSleep(\cf8 20\cf5 );\
	\}\
	
\f1\b \cf6 return
\f0\b0 \cf5  \cf8 0\cf5 ;\
\}\
\
\
\cf2 #include \cf4 <stdio.h>\cf5 \
\cf2 #include \cf4 <stdlib.h>\cf5 \
\cf2 #include \cf4 "fssimplewindow.h"\cf5 \
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawPlayer\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  x,
\f1\b \cf6 int
\f0\b0 \cf5  y)\
\{\
	glColor3f(\cf8 0\cf5 ,\cf8 1\cf5 ,\cf8 0\cf5 );\
	glBegin(GL_QUADS);\
	glVertex2i(x-\cf8 5\cf5 ,y);\
	glVertex2i(x-\cf8 5\cf5 ,y-\cf8 20\cf5 );\
	glVertex2i(x+\cf8 5\cf5 ,y-\cf8 20\cf5 );\
	glVertex2i(x+\cf8 5\cf5 ,y);\
\
	glVertex2i(x-\cf8 15\cf5 ,y);\
	glVertex2i(x-\cf8 15\cf5 ,y-\cf8 10\cf5 );\
	glVertex2i(x+\cf8 15\cf5 ,y-\cf8 10\cf5 );\
	glVertex2i(x+\cf8 15\cf5 ,y);\
	glEnd();\
\}\
\

\f1\b \cf6 bool
\f0\b0 \cf5  \cf7 CheckCollision\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  mx,
\f1\b \cf6 int
\f0\b0 \cf5  my,
\f1\b \cf6 int
\f0\b0 \cf5  tx,
\f1\b \cf6 int
\f0\b0 \cf5  ty,
\f1\b \cf6 int
\f0\b0 \cf5  tw,
\f1\b \cf6 int
\f0\b0 \cf5  th)\
\{\
	
\f1\b \cf6 int
\f0\b0 \cf5  rx=mx-tx;\
	
\f1\b \cf6 int
\f0\b0 \cf5  ry=my-ty;\
	
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 <=rx && rx<=tw && \cf8 0\cf5 <=ry && ry<=th)\
	\{\
		
\f1\b \cf6 return
\f0\b0 \cf5  
\f1\b \cf6 true
\f0\b0 \cf5 ;\
	\}\
	
\f1\b \cf6 return
\f0\b0 \cf5  
\f1\b \cf6 false
\f0\b0 \cf5 ;\
\}\
\

\f1\b \cf6 class
\f0\b0 \cf5  \cf9 Missile\cf5 \
\{\

\f1\b \cf6 public
\f0\b0 \cf5 :\
	
\f1\b \cf6 int
\f0\b0 \cf5  state,x,y;\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Initialize\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Launch\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  x0,
\f1\b \cf6 int
\f0\b0 \cf5  y0);\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Disappear\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Move\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Draw\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
\};\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Initialize\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	state=\cf8 0\cf5 ;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Launch\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  x0,
\f1\b \cf6 int
\f0\b0 \cf5  y0)\
\{\
	state=\cf8 1\cf5 ;\
	x=x0;\
	y=y0;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Disappear\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	state=\cf8 0\cf5 ;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Move\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	y-=\cf8 10\cf5 ;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Missile\cf5 ::\cf7 Draw\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	glColor3ub(\cf8 255\cf5 ,\cf8 0\cf5 ,\cf8 0\cf5 );\
	glBegin(GL_LINES);\
	glVertex2i(x,y);\
	glVertex2i(x,y+\cf8 10\cf5 );\
	glEnd();\
\}\
\
\

\f1\b \cf6 class
\f0\b0 \cf5  \cf9 Target\cf5 \
\{\

\f1\b \cf6 public
\f0\b0 \cf5 :\
	
\f1\b \cf6 int
\f0\b0 \cf5  state,x,y,w,h,v;\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Initialize\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Move\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Disappear\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
	
\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Draw\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 );\
\};\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Target\cf5 ::\cf7 Initialize\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	state=\cf8 1\cf5 ;\
	x=\cf8 0\cf5 ;\
	y=\cf8 100\cf5 +rand()%\cf8 20\cf5 ;\
	w=\cf8 60\cf5 +rand()%\cf8 40\cf5 ;\
	h=\cf8 20\cf5 ;\
	v=\cf8 20\cf5 +rand()%\cf8 20\cf5 ;\
\}\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Target\cf5 ::\cf7 Move\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	x+=v;\
\}\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Target\cf5 ::\cf7 Disappear\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	state=\cf8 0\cf5 ;\
\}\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Target\cf5 ::\cf7 Draw\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	glColor3f(\cf8 0\cf5 ,\cf8 1\cf5 ,\cf8 1\cf5 );\
	glBegin(GL_QUADS);\
	glVertex2i(x,y);\
	glVertex2i(x+w,y);\
	glVertex2i(x+w,y+h);\
	glVertex2i(x,y+h);\
	glEnd();\
\}\
\
\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawMissiles\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  n,Missile missiles[])\
\{\
	
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i=\cf8 0\cf5 ; i<n; ++i)\
	\{\
		
\f1\b \cf6 auto
\f0\b0 \cf5  m=missiles[i];\
		
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=m.state)\
		\{\
			m.Draw();\
		\}\
	\}\
\}\
\

\f1\b \cf6 int
\f0\b0 \cf5  \cf7 main\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
	
\f1\b \cf6 const
\f0\b0 \cf5  
\f1\b \cf6 int
\f0\b0 \cf5  numMissiles=\cf8 3\cf5 ;\
	
\f1\b \cf6 const
\f0\b0 \cf5  
\f1\b \cf6 int
\f0\b0 \cf5  numTargets=\cf8 5\cf5 ;\
	
\f1\b \cf6 int
\f0\b0 \cf5  x=\cf8 400\cf5 ,y=\cf8 550\cf5 ;\
	Missile missiles[numMissiles];\
	Target targets[numTargets];\
\
	
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &m : missiles)\
	\{\
		m.Initialize();\
	\}\
\
	
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &t : targets)\
	\{\
		t.Initialize();\
	\}\
\
	
\f1\b \cf6 int
\f0\b0 \cf5  closeCounter=\cf8 0\cf5 ;\
\
	FsOpenWindow(\cf8 0\cf5 ,\cf8 0\cf5 ,\cf8 800\cf5 ,\cf8 600\cf5 ,\cf8 1\cf5 );\
	
\f1\b \cf6 for
\f0\b0 \cf5 (;;)\
	\{\
		FsPollDevice();\
		
\f1\b \cf6 auto
\f0\b0 \cf5  key=FsInkey();\
		
\f1\b \cf6 if
\f0\b0 \cf5 (FSKEY_ESC==key)\
		\{\
			
\f1\b \cf6 break
\f0\b0 \cf5 ;\
		\}\
\
		
\f1\b \cf6 if
\f0\b0 \cf5 (FsGetKeyState(FSKEY_LEFT))\
		\{\
			x-=\cf8 10\cf5 ;\
		\}\
		
\f1\b \cf6 if
\f0\b0 \cf5 (FsGetKeyState(FSKEY_RIGHT))\
		\{\
			x+=\cf8 10\cf5 ;\
		\}\
		
\f1\b \cf6 if
\f0\b0 \cf5 (FSKEY_SPACE==key)\
		\{\
			
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &m : missiles)\
			\{\
				
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 ==m.state)\
				\{\
					m.Launch(x,y);\
					
\f1\b \cf6 break
\f0\b0 \cf5 ;\
				\}\
			\}\
		\}\
\
		
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &m : missiles)\
		\{\
			
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=m.state)\
			\{\
				m.Move();\
				
\f1\b \cf6 if
\f0\b0 \cf5 (m.y<\cf8 0\cf5 )\
				\{\
					m.Disappear();\
				\}\
			\}\
		\}\
\
		
\f1\b \cf6 int
\f0\b0 \cf5  numTargetsAlive=\cf8 0\cf5 ;\
		
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &t : targets)\
		\{\
			
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=t.state)\
			\{\
				++numTargetsAlive;\
				t.Move();\
				
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 800\cf5 <t.x)\
				\{\
					t.x=\cf8 0\cf5 ;\
				\}\
			\}\
			
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  &m : missiles)\
			\{\
				
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=m.state &&\
				   \cf8 0\cf5 !=t.state &&\
				   
\f1\b \cf6 true
\f0\b0 \cf5 ==CheckCollision(m.x,m.y,t.x,t.y,t.w,t.h))\
				\{\
					m.Disappear();\
					t.Disappear();\
					printf(\cf4 "Hit!\\n"\cf5 );\
				\}\
			\}\
		\}\
		
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 ==numTargetsAlive && \cf8 0\cf5 ==closeCounter)\
		\{\
			closeCounter=\cf8 20\cf5 ;\
		\}\
		
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 <closeCounter)\
		\{\
			--closeCounter;\
			
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 ==closeCounter)\
			\{\
				
\f1\b \cf6 break
\f0\b0 \cf5 ;\
			\}\
		\}\
\
		glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\
		DrawPlayer(x,y);\
\
		DrawMissiles(numMissiles,missiles);\
		
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 auto
\f0\b0 \cf5  t : targets)\
		\{\
			
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 !=t.state)\
			\{\
				t.Draw();\
			\}\
		\}\
\
		FsSwapBuffers();\
		FsSleep(\cf8 20\cf5 );\
	\}\
	
\f1\b \cf6 return
\f0\b0 \cf5  \cf8 0\cf5 ;\
\}\
\
\
\
\cf2 #define GL_SILENCE_DEPRECATION\cf5 \
\cf2 #include \cf4 <stdio.h>\cf5 \
\cf2 #include \cf4 <stdlib.h>\cf5 \
\cf2 #include \cf4 <string.h>\cf5 \
\cf2 #include \cf4 <math.h>\cf5 \
\cf2 #include \cf4 <time.h>\cf5 \
\cf2 #include \cf4 "fssimplewindow.h"\cf5 \
\cf2 #include \cf4 "ysglfontdata.h"\cf5 \
\cf2 #include \cf4 <chrono>\cf5 \
\
\

\f1\b \cf6 const
\f0\b0 \cf5  
\f1\b \cf6 double
\f0\b0 \cf5  PI = \cf8 3.1415927\cf5 ;\

\f1\b \cf6 const
\f0\b0 \cf5  
\f1\b \cf6 double
\f0\b0 \cf5  G = \cf8 98\cf5 ; \cf10 // gravity\cf5 \

\f1\b \cf6 const
\f0\b0 \cf5  
\f1\b \cf6 double
\f0\b0 \cf5  air_resistance = \cf8 5\cf5 ;\
\
\cf10 //Draw Basketball\cf5 \

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawBall\cf5  (
\f1\b \cf6 double
\f0\b0 \cf5  x, 
\f1\b \cf6 double
\f0\b0 \cf5  y)\
\{\
        
\f1\b \cf6 double
\f0\b0 \cf5  rad = \cf8 7\cf5 ; \cf10 //0.5 pixels\cf5 \
        \cf11 glColor3ub\cf5 (\cf8 181\cf5 , \cf8 66\cf5 , \cf8 19\cf5 );\
        \
        \cf11 glBegin\cf5 (\cf2 GL_POLYGON\cf5 );\
        
\f1\b \cf6 for
\f0\b0 \cf5  (
\f1\b \cf6 int
\f0\b0 \cf5  i = \cf8 0\cf5 ; i <\cf8 360\cf5 ; i+=\cf8 30\cf5 )\
        \{\
            
\f1\b \cf6 double
\f0\b0 \cf5  angle=(
\f1\b \cf6 double
\f0\b0 \cf5 )i*\cf12 PI\cf5 /\cf8 180\cf5 ;\
            \cf11 glVertex2d\cf5 ((x)+\cf11 cos\cf5 (angle)*rad, (y)+\cf11 sin\cf5 (angle)*rad);\
        \}\
        \cf11 glEnd\cf5 ();\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawHoop\cf5 ()\
\{\
    \cf11 glColor3ub\cf5 (\cf8 204\cf5 , \cf8 85\cf5 , \cf8 0\cf5 );\
    \
    \cf11 glBegin\cf5 (\cf2 GL_QUADS\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 620\cf5 , \cf8 250\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 645\cf5 , \cf8 250\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 645\cf5 , \cf8 255\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 620\cf5 , \cf8 255\cf5 );\
    \
    \cf11 glEnd\cf5 ();\
\}\
\
\cf10 //void DrawBackground\cf5 \

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 Drawground\cf5  ()\
\{\
    \cf11 glColor3ub\cf5 (\cf8 155\cf5 , \cf8 118\cf5 , \cf8 83\cf5 );\
    \cf11 glBegin\cf5 (\cf2 GL_LINES\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 0\cf5 , \cf8 400\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 800\cf5 , \cf8 400\cf5 );\
    \cf11 glEnd\cf5 ();\
    \
    \cf11 glBegin\cf5 (\cf2 GL_QUADS\cf5 );\
    \cf11 glColor3ub\cf5 (\cf8 155\cf5 , \cf8 118\cf5 , \cf8 83\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 0\cf5 , \cf8 400\cf5 );\
    \
    \cf11 glColor3ub\cf5 (\cf8 155\cf5 , \cf8 118\cf5 , \cf8 83\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 800\cf5 , \cf8 400\cf5 );\
    \
    \cf11 glColor3ub\cf5 (\cf8 255\cf5 , \cf8 255\cf5 , \cf8 255\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 800\cf5 , \cf8 600\cf5 );\
    \
    \cf11 glColor3ub\cf5 (\cf8 255\cf5 , \cf8 255\cf5 , \cf8 255\cf5 );\
    \cf11 glVertex2i\cf5 (\cf8 0\cf5 , \cf8 600\cf5 );\
    glEnd();\
    \
    
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i = -\cf8 10\cf5 ; i <\cf8 410\cf5  ; i += \cf8 2\cf5 )\
    \{\
        glColor3ub(\cf8 155\cf5 , \cf8 118\cf5 , \cf8 83\cf5 );\
        glBegin(GL_LINE_STRIP);\
        glVertex2i(\cf8 10\cf5 +i, \cf8 400\cf5 );\
        glVertex2i(i, \cf8 500\cf5 );\
       \
        glVertex2i(i, \cf8 500\cf5 );\
        glVertex2i(i+\cf8 10\cf5 , \cf8 600\cf5 );\
        glEnd();\
    \}\
    \
    
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i = \cf8 390\cf5 ; i <\cf8 800\cf5  ; i += \cf8 2\cf5 )\
    \{\
        glColor3ub(\cf8 155\cf5 , \cf8 118\cf5 , \cf8 83\cf5 );\
        glBegin(GL_LINES);\
        glVertex2i(i, \cf8 400\cf5 );\
        glVertex2i(i+\cf8 10\cf5 , \cf8 500\cf5 );\
        \
        glVertex2i(i+\cf8 10\cf5 , \cf8 500\cf5 );\
        glVertex2i(i, \cf8 600\cf5 );\
        glEnd();\
    \}\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawGrass\cf5 ()\
\{\
    
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i = \cf8 0\cf5 ; i <\cf8 100\cf5  ; i += \cf8 10\cf5 )\
    \{\
        glColor3f(\cf8 0\cf5 ,\cf8 1\cf5 ,\cf8 0\cf5 );\
        glBegin(GL_TRIANGLES);\
        glVertex2i(i, \cf8 390\cf5 );\
        glVertex2i(\cf8 5\cf5 +i, \cf8 375\cf5 );\
        glVertex2i(\cf8 10\cf5 +i, \cf8 390\cf5 );\
        glEnd();\
    \}\
    
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i = \cf8 700\cf5 ; i <\cf8 800\cf5  ; i += \cf8 10\cf5 )\
    \{\
        glColor3f(\cf8 0\cf5 ,\cf8 1\cf5 ,\cf8 0\cf5 );\
        glBegin(GL_TRIANGLES);\
        glVertex2i(i, \cf8 390\cf5 );\
        glVertex2i(\cf8 5\cf5 +i, \cf8 375\cf5 );\
        glVertex2i(\cf8 10\cf5 +i, \cf8 390\cf5 );\
        glEnd();\
    \}\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawSky\cf5 ()\
\{\
    glBegin(GL_QUADS);\
    glColor3ub(\cf8 135\cf5 , \cf8 206\cf5 , \cf8 235\cf5 );\
    glVertex2i(\cf8 0\cf5 , \cf8 0\cf5 );\
    \
    glColor3ub(\cf8 135\cf5 , \cf8 206\cf5 , \cf8 235\cf5 );\
    glVertex2i(\cf8 800\cf5 , \cf8 0\cf5 );\
    \
    glColor3ub(\cf8 255\cf5 , \cf8 255\cf5 , \cf8 255\cf5 );\
    glVertex2i(\cf8 800\cf5 , \cf8 400\cf5 );\
    \
    glColor3ub(\cf8 255\cf5 , \cf8 255\cf5 , \cf8 255\cf5 );\
    glVertex2i(\cf8 0\cf5 , \cf8 400\cf5 );\
    \
    glEnd();\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawBasketballNet\cf5 ()\
\{\
    glColor3ub(\cf8 100\cf5 , \cf8 100\cf5 , \cf8 100\cf5 );\
    glBegin(GL_QUADS);\
    glVertex2i(\cf8 680\cf5 , \cf8 400\cf5 );\
    glVertex2i(\cf8 670\cf5 , \cf8 400\cf5 );\
    glVertex2i(\cf8 670\cf5 , \cf8 220\cf5 );\
    glVertex2i(\cf8 680\cf5 , \cf8 220\cf5 );\
    \
    glVertex2i(\cf8 650\cf5 , \cf8 220\cf5 );\
    glVertex2i(\cf8 670\cf5 , \cf8 220\cf5 );\
    glVertex2i(\cf8 670\cf5 , \cf8 230\cf5 );\
    glVertex2i(\cf8 650\cf5 , \cf8 230\cf5 );\
    \
    glVertex2i(\cf8 645\cf5 , \cf8 160\cf5 );\
    glVertex2i(\cf8 650\cf5 , \cf8 160\cf5 );\
    glVertex2i(\cf8 650\cf5 , \cf8 260\cf5 );\
    glVertex2i(\cf8 645\cf5 , \cf8 260\cf5 );\
    \
    glEnd();\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawGarden\cf5  ()\
\{\
   \cf10 //base\cf5 \
    glColor3ub(\cf8 211\cf5 , \cf8 211\cf5 , \cf8 211\cf5 );\
    glBegin(GL_QUADS);\
    glVertex2i(\cf8 0\cf5 , \cf8 390\cf5 );\
    glVertex2i(\cf8 100\cf5 , \cf8 390\cf5 );\
    glVertex2i(\cf8 100\cf5 , \cf8 400\cf5 );\
    glVertex2i(\cf8 0\cf5 , \cf8 400\cf5 );\
    \
    glVertex2i(\cf8 700\cf5 , \cf8 390\cf5 );\
    glVertex2i(\cf8 800\cf5 , \cf8 390\cf5 );\
    glVertex2i(\cf8 800\cf5 , \cf8 400\cf5 );\
    glVertex2i(\cf8 700\cf5 , \cf8 400\cf5 );\
    glEnd();\
    \
    glColor3ub(\cf8 0\cf5 , \cf8 0\cf5 , \cf8 0\cf5 );\
    glBegin(GL_LINE_LOOP);\
    glVertex2i(\cf8 0\cf5 , \cf8 390\cf5 );\
    glVertex2i(\cf8 100\cf5 , \cf8 390\cf5 );\
    glVertex2i(\cf8 100\cf5 , \cf8 400\cf5 );\
    glVertex2i(\cf8 0\cf5 , \cf8 400\cf5 );\
    glEnd();\
    \
    glColor3ub(\cf8 0\cf5 , \cf8 0\cf5 , \cf8 0\cf5 );\
    glBegin(GL_LINE_LOOP);\
    glVertex2i(\cf8 700\cf5 , \cf8 390\cf5 );\
    glVertex2i(\cf8 800\cf5 , \cf8 390\cf5 );\
    glVertex2i(\cf8 800\cf5 , \cf8 400\cf5 );\
    glVertex2i(\cf8 700\cf5 , \cf8 400\cf5 );\
    glEnd();\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawPlayer\cf5 (
\f1\b \cf6 double
\f0\b0 \cf5  player_x,
\f1\b \cf6 double
\f0\b0 \cf5  player_y, 
\f1\b \cf6 double
\f0\b0 \cf5  angle)\
\{\
    \cf10 //Draw Face\cf5 \
    glColor3ub(\cf8 255\cf5 , \cf8 195\cf5 , \cf8 170\cf5 );\
    glBegin(GL_POLYGON);\
    glVertex2i(player_x+\cf8 5\cf5 , player_y);\
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 5\cf5 );\
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 10\cf5 );\
    glVertex2i(player_x, player_y+\cf8 10\cf5 );\
    glVertex2i(player_x, player_y+\cf8 5\cf5 );\
    glEnd();\
    \cf10 //Draw Hair\cf5 \
    glColor3ub(\cf8 192\cf5 , \cf8 192\cf5 , \cf8 192\cf5 );\
    glBegin(GL_TRIANGLE_FAN);\
    glVertex2i(player_x, player_y);\
    glVertex2i(player_x+\cf8 5\cf5 , player_y);\
    glVertex2i(player_x, player_y+\cf8 5\cf5 );\
    glVertex2i(player_x+\cf8 10\cf5 , player_y);\
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 5\cf5 );\
    glEnd();\
    \
    \cf10 //Draw Main Body\cf5 \
    glColor3ub(\cf8 36\cf5 , \cf8 36\cf5 , \cf8 36\cf5 );\
    glBegin(GL_QUADS);\
    glVertex2i(player_x-\cf8 5\cf5 , player_y+\cf8 10\cf5 );\
    glVertex2i(player_x+\cf8 15\cf5 , player_y+\cf8 10\cf5 );\
    glVertex2i(player_x+\cf8 15\cf5 , player_y+\cf8 30\cf5 );\
    glVertex2i(player_x-\cf8 5\cf5 , player_y+\cf8 30\cf5 );\
    glEnd();\
    \
    \cf10 //Draw Legs\cf5 \
    glColor3ub(\cf8 128\cf5 , \cf8 128\cf5 , \cf8 128\cf5 );\
    glBegin(GL_QUADS);\
    glVertex2i(player_x, player_y+\cf8 30\cf5 );\
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 30\cf5 );\
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 50\cf5 );\
    glVertex2i(player_x, player_y+\cf8 50\cf5 );\
    \cf10 //Draw Beidai\cf5 \
    \
    glColor3ub(\cf8 242\cf5 , \cf8 243\cf5 , \cf8 245\cf5 );\
    glVertex2i(player_x+\cf8 1\cf5 , player_y+\cf8 10\cf5 );\
    glVertex2i(player_x+\cf8 3\cf5 , player_y+\cf8 10\cf5 );\
    glVertex2i(player_x+\cf8 3\cf5 , player_y+\cf8 30\cf5 );\
    glVertex2i(player_x+\cf8 1\cf5 , player_y+\cf8 30\cf5 );\
    \
    glVertex2i(player_x+\cf8 7\cf5 , player_y+\cf8 10\cf5 );\
    glVertex2i(player_x+\cf8 9\cf5 , player_y+\cf8 10\cf5 );\
    glVertex2i(player_x+\cf8 9\cf5 , player_y+\cf8 30\cf5 );\
    glVertex2i(player_x+\cf8 7\cf5 , player_y+\cf8 30\cf5 );\
    glEnd();\
    \
    \cf10 //Draw foot & hands\cf5 \
    glColor3ub(\cf8 255\cf5 , \cf8 195\cf5 , \cf8 170\cf5 );\
    glBegin(GL_QUADS);\
    glVertex2i(player_x-\cf8 5\cf5 , player_y+\cf8 27\cf5 );\
    glVertex2i(player_x, player_y+\cf8 27\cf5 );\
    glVertex2i(player_x, player_y+\cf8 30\cf5 );\
    glVertex2i(player_x-\cf8 5\cf5 , player_y+\cf8 30\cf5 );\
    \
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 27\cf5 );\
    glVertex2i(player_x+\cf8 15\cf5 , player_y+\cf8 27\cf5 );\
    glVertex2i(player_x+\cf8 15\cf5 , player_y+\cf8 30\cf5 );\
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 30\cf5 );\
    glEnd();\
    \
    glColor3ub(\cf8 126\cf5 , \cf8 84\cf5 , \cf8 41\cf5 );\
    glBegin(GL_QUADS);\
    glVertex2i(player_x, player_y+\cf8 47\cf5 );\
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 47\cf5 );\
    glVertex2i(player_x+\cf8 10\cf5 , player_y+\cf8 50\cf5 );\
    glVertex2i(player_x, player_y+\cf8 50\cf5 );\
    glEnd();\
\}\
\

\f1\b \cf6 bool
\f0\b0 \cf5  \cf7 CheckCollision\cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  mx,
\f1\b \cf6 int
\f0\b0 \cf5  my,
\f1\b \cf6 int
\f0\b0 \cf5  tx,
\f1\b \cf6 int
\f0\b0 \cf5  ty,
\f1\b \cf6 int
\f0\b0 \cf5  tw,
\f1\b \cf6 int
\f0\b0 \cf5  th)\
\{\
    
\f1\b \cf6 int
\f0\b0 \cf5  rx=mx-tx;\
    
\f1\b \cf6 int
\f0\b0 \cf5  ry=my-ty;\
    
\f1\b \cf6 if
\f0\b0 \cf5 (\cf8 0\cf5 <=rx && rx<=tw && \cf8 0\cf5 <=ry && ry<=th)\
    \{\
        
\f1\b \cf6 return
\f0\b0 \cf5  
\f1\b \cf6 true
\f0\b0 \cf5 ;\
    \}\
    
\f1\b \cf6 return
\f0\b0 \cf5  
\f1\b \cf6 false
\f0\b0 \cf5 ;\
\}\
\

\f1\b \cf6 void
\f0\b0 \cf5  \cf7 DrawText\cf5 ( 
\f1\b \cf6 int
\f0\b0 \cf5  score, 
\f1\b \cf6 int
\f0\b0 \cf5  power, 
\f1\b \cf6 int
\f0\b0 \cf5  angle )\
\{\
    glColor3ub(\cf8 255\cf5 ,\cf8 255\cf5 ,\cf8 255\cf5 );\
    
\f1\b \cf6 char
\f0\b0 \cf5  score_str[\cf8 10\cf5 ];\
    
\f1\b \cf6 char
\f0\b0 \cf5  power_str[\cf8 12\cf5 ];\
    
\f1\b \cf6 char
\f0\b0 \cf5  angle_str[\cf8 12\cf5 ];\
    
\f1\b \cf6 char
\f0\b0 \cf5  instruction1[] = \cf4 "UP/DOWN Keys: Change Shooting Angle"\cf5 ;\
    
\f1\b \cf6 char
\f0\b0 \cf5  instruction2[] = \cf4 "LEFT/RIGHT Keys: Change CXK Position"\cf5 ;\
    
\f1\b \cf6 char
\f0\b0 \cf5  instruction3[] = \cf4 "Q/W Keys: Change Shooting Power"\cf5 ;\
    sprintf(score_str, \cf4 "Score: %d"\cf5 , score);\
    sprintf(power_str, \cf4 "Power: %d%%"\cf5 , power);\
    sprintf(angle_str, \cf4 "Angle: %d"\cf5 , angle);\
    glRasterPos2i(\cf8 575\cf5 ,\cf8 30\cf5 );\
    YsGlDrawFontBitmap16x20(score_str);\
    glRasterPos2i(\cf8 25\cf5 ,\cf8 30\cf5 );\
    YsGlDrawFontBitmap16x20(power_str);\
    glRasterPos2i(\cf8 25\cf5 ,\cf8 60\cf5 );\
    YsGlDrawFontBitmap16x20(angle_str);\
    glRasterPos2i(\cf8 25\cf5 , \cf8 490\cf5 );\
    YsGlDrawFontBitmap12x16(instruction1);\
    glRasterPos2i(\cf8 25\cf5 , \cf8 460\cf5 );\
    YsGlDrawFontBitmap12x16(instruction2);\
    glRasterPos2i(\cf8 25\cf5 , \cf8 430\cf5 );\
    YsGlDrawFontBitmap12x16(instruction3);\
\}\
\

\f1\b \cf6 const
\f0\b0 \cf5  
\f1\b \cf6 int
\f0\b0 \cf5  numBalls = \cf8 100\cf5 ;\

\f1\b \cf6 int
\f0\b0 \cf5  \cf7 main\cf5 (
\f1\b \cf6 void
\f0\b0 \cf5 )\
\{\
\
    
\f1\b \cf6 double
\f0\b0 \cf5  ball_x[numBalls],ball_y[numBalls],ball_Vx[numBalls],ball_Vy[numBalls];\
    \
    
\f1\b \cf6 double
\f0\b0 \cf5  player_x = \cf8 105\cf5 ;\
    
\f1\b \cf6 double
\f0\b0 \cf5  player_y = \cf8 350\cf5 ;\
\
    
\f1\b \cf6 int
\f0\b0 \cf5  ball_V = \cf8 100\cf5 ;\
    
\f1\b \cf6 int
\f0\b0 \cf5  score = \cf8 0\cf5 ;\
    
\f1\b \cf6 int
\f0\b0 \cf5  ball_state[numBalls];\
    
\f1\b \cf6 int
\f0\b0 \cf5  angle = \cf8 30\cf5 ;\
    \
    
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i=\cf8 0\cf5 ; i<numBalls; ++i)\
    \{\
        ball_state[i]=\cf8 0\cf5 ;\
        \
        ball_x[i]=-\cf8 10\cf5 ;\
        ball_y[i]=-\cf8 10\cf5 ;\
        ball_Vx[i]=\cf8 0\cf5 ;\
        ball_Vy[i]=\cf8 0\cf5 ;\
    \}\
    \
    FsOpenWindow(\cf8 0\cf5 , \cf8 0\cf5 , \cf8 800\cf5 , \cf8 600\cf5 , \cf8 1\cf5 );\
\
    srand((
\f1\b \cf6 int
\f0\b0 \cf5 )time(
\f1\b \cf6 nullptr
\f0\b0 \cf5 ));\
    time_t start = time(\cf8 0\cf5 );\
    \
    
\f1\b \cf6 for
\f0\b0 \cf5 (;;)\
    \{\
        FsPollDevice();\
        
\f1\b \cf6 auto
\f0\b0 \cf5  key = FsInkey();\
        
\f1\b \cf6 auto
\f0\b0 \cf5  ms=FsPassedTime();\
        
\f1\b \cf6 double
\f0\b0 \cf5  dt = (
\f1\b \cf6 double
\f0\b0 \cf5 )ms/\cf8 1000.0\cf5 ;\
        
\f1\b \cf6 if
\f0\b0 \cf5 (FSKEY_ESC == key)\
        \{\
            
\f1\b \cf6 break
\f0\b0 \cf5 ;\
        \}\
        \
        
\f1\b \cf6 int
\f0\b0 \cf5  timeGone = difftime(time(\cf8 0\cf5 ), start);\
        \
        
\f1\b \cf6 if
\f0\b0 \cf5  (timeGone > \cf8 1\cf5 )\
        \{\
            
\f1\b \cf6 if
\f0\b0 \cf5 (player_x < \cf8 625\cf5  && player_x >= \cf8 105\cf5 )\
                \{\
                    player_x += \cf8 1\cf5 ;\
                \}\
                
\f1\b \cf6 if
\f0\b0 \cf5 (player_x >= \cf8 625\cf5 )\
                \{\
                    player_x = \cf8 105\cf5 ;\
                \}\
            \
            angle = (
\f1\b \cf6 double
\f0\b0 \cf5 )(rand()%\cf8 90\cf5 );\
            ball_V = (
\f1\b \cf6 double
\f0\b0 \cf5 )((rand()%\cf8 300\cf5 )+\cf8 100\cf5 );\
        \}\
        \
     \
        \
        
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i=\cf8 0\cf5 ; i<numBalls; ++i)\
        \{\
            
\f1\b \cf6 if
\f0\b0 \cf5 (FSKEY_SPACE == key && ball_state[i] == \cf8 0\cf5 )\
            \{\
                ball_state[i] = \cf8 1\cf5 ;\
                \
                ball_x[i] = player_x + \cf8 15\cf5 ;\
                ball_y[i] = player_y + \cf8 30\cf5 ;\
                \
                ball_Vx[i] = (ball_V*cos(angle*(PI/\cf8 180.0\cf5  ))-air_resistance*dt*cos(angle*(PI/\cf8 180.0\cf5 )));\
                ball_Vy[i] = (ball_V*sin(angle*(PI/\cf8 180.0\cf5  ))-air_resistance*dt*sin(angle*(PI/\cf8 180.0\cf5 )));\
            \}\
        \}\
            \
        
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i=\cf8 0\cf5 ; i<numBalls; ++i)\
        \{\
            ball_x[i] += ball_Vx[i]*dt;\
            ball_y[i] -= ball_Vy[i]*dt;\
            \
            ball_Vx[i] = ball_Vx[i];\
            ball_Vy[i] -= G*dt;\
            \
        \}\
    \
        
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i=\cf8 0\cf5 ; i<numBalls; ++i)\
        \{\
            
\f1\b \cf6 if
\f0\b0 \cf5  (ball_x[i] > \cf8 800\cf5  || ball_y[i] > \cf8 500\cf5  || ball_x[i] < \cf8 0\cf5  )\
            \{\
                ball_state[i] = \cf8 0\cf5 ;\
                ball_x[i] = \cf8 900\cf5 ;\
            \}\
        \}\
        \
    \
        
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i=\cf8 0\cf5 ; i<numBalls; ++i)\
        \{\
            \
            
\f1\b \cf6 bool
\f0\b0 \cf5  Collision_Ground = CheckCollision(ball_x[i], ball_y[i], \cf8 0\cf5 , \cf8 400\cf5 , \cf8 800\cf5 , \cf8 200\cf5 );\
            
\f1\b \cf6 bool
\f0\b0 \cf5  Collision_Board = CheckCollision(ball_x[i], ball_y[i], \cf8 645\cf5 , \cf8 160\cf5 , \cf8 5\cf5 , \cf8 100\cf5 );\
            
\f1\b \cf6 bool
\f0\b0 \cf5  Collision_index = CheckCollision(ball_x[i], ball_y[i], \cf8 620\cf5 , \cf8 250\cf5 , \cf8 25\cf5 , \cf8 5\cf5 );\
            \
            
\f1\b \cf6 if
\f0\b0 \cf5 (Collision_Ground == 
\f1\b \cf6 true
\f0\b0 \cf5  && ball_state[i] == \cf8 1\cf5 )\
            \{\
                ball_Vy[i] = -ball_Vy[i];\
            \}\
            
\f1\b \cf6 else
\f0\b0 \cf5  
\f1\b \cf6 if
\f0\b0 \cf5  (Collision_Board == 
\f1\b \cf6 true
\f0\b0 \cf5  && ball_state[i] == \cf8 1\cf5 )\
            \{\
                ball_Vx[i] = -ball_Vx[i];\
            \}\
            
\f1\b \cf6 else
\f0\b0 \cf5  
\f1\b \cf6 if
\f0\b0 \cf5  (Collision_index == 
\f1\b \cf6 true
\f0\b0 \cf5  && ball_state[i] == \cf8 1\cf5 )\
            \{\
                ball_state[i] = \cf8 0\cf5 ;\
                ++score;\
            \}\
            
\f1\b \cf6 if
\f0\b0 \cf5 (Collision_index == 
\f1\b \cf6 true
\f0\b0 \cf5  )\
            \{\
                glRasterPos2i(\cf8 300\cf5 ,\cf8 50\cf5 );\
                YsGlDrawFontBitmap12x16(\cf4 "You Scored!!!!"\cf5 );\
            \}\
        \}\
  \
        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);\
        glShadeModel(GL_SMOOTH);\
\
        DrawSky();\
        Drawground();\
        DrawGrass();\
        DrawGarden();\
            \
        DrawBasketballNet();\
        DrawHoop();\
        DrawPlayer(player_x, player_y, angle);\
        
\f1\b \cf6 for
\f0\b0 \cf5 (
\f1\b \cf6 int
\f0\b0 \cf5  i=\cf8 0\cf5 ; i<numBalls; ++i)\
        \{\
            DrawBall(ball_x[i], ball_y[i]);\
        \}\
        \cf10 //DrawText(score, ball_V-100, angle);\cf5 \
        glFlush();\
        FsSwapBuffers();\
        FsSleep(\cf8 10\cf5 );\
     \
    \}\
    
\f1\b \cf6 return
\f0\b0 \cf5  \cf8 0\cf5 ;\
\}\
\
\
\
}